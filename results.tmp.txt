
             _        _                    _             _            _
            /\ \     / /\                /\ \           /\ \         / /\
            \ \ \   / /  \              /  \ \         /  \ \       / /  \
            /\ \_\ / / /\ \            / /\ \ \       / /\ \ \     / / /\ \
           / /\/_// / /\ \ \          / / /\ \ \     / / /\ \ \   / / /\ \ \
  _       / / /  / / /  \ \ \        / / /  \ \_\   / / /  \ \_\ / / /\ \_\ \
 /\ \    / / /  / / /___/ /\ \      / / /    \/_/  / / /   / / // / /\ \ \___\
 \ \_\  / / /  / / /_____/ /\ \    / / /          / / /   / / // / /  \ \ \__/
 / / /_/ / /  / /_________/\ \ \  / / /________  / / /___/ / // / /____\_\ \
/ / /__\/ /  / / /_       __\ \_\/ / /_________\/ / /____\/ // / /__________\
\/_______/   \_\___\     /____/_/\/____________/\/_________/ \/_____________/


Excluding tags: [:test]
Including tags: [location: {"test/conformance_test.exs", 7}]

..

  1) test JSONPath conformance: test/fixtures/functions/search.json in the middle (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?search(@.a, 'a.*')]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?search(@.a, 'a.*')]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"search\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



  2) test JSONPath conformance: test/fixtures/functions/match.json not a match (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?match(@.a, 'a.*')]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?match(@.a, 'a.*')]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"match\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

  3) test JSONPath conformance: test/fixtures/slice_selector.json slice selector with everything omitted, short form (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[:]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Selector \"$[:]\" produced [] but expected [0, 1, 2, 3]", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



  4) test JSONPath conformance: test/fixtures/whitespace/selectors.json return between root and dot (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$\r.a" to be valid, but got error: %CaseClauseError{term: {:ok, "ab"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



  5) test JSONPath conformance: test/fixtures/filter.json equals number (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a==1]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a==1]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

  6) test JSONPath conformance: test/fixtures/whitespace/operators.json newline after < (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a<\n@.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a<\\n@.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



  7) test JSONPath conformance: test/fixtures/filter.json equals number, exponent leading -0 (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a==1e-02]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a==1e-02]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



  8) test JSONPath conformance: test/fixtures/functions/search.json not a match (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?search(@.a, 'a.*')]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?search(@.a, 'a.*')]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"search\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

  9) test JSONPath conformance: test/fixtures/filter.json not-equals string, single quotes (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a!='b']" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a!='b']\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

...

 10) test JSONPath conformance: test/fixtures/whitespace/selectors.json newline between bracket and bracket (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$['a'] \n['b']" to be valid, but got error: %CaseClauseError{term: {:ok, %{"b" => "ab"}}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

 11) test JSONPath conformance: test/fixtures/functions/value.json single-value nodelist (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?value(@.*)==4]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?value(@.*)==4]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"value\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

...

 12) test JSONPath conformance: test/fixtures/whitespace/selectors.json newline between selector and comma (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$['a'\n,'b']" to be valid, but got error: %CaseClauseError{term: {:ok, "ab"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



 13) test JSONPath conformance: test/fixtures/functions/match.json non-string second arg (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?match(@.a, 1)]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?match(@.a, 1)]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"match\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

..

 14) test JSONPath conformance: test/fixtures/filter.json greater than string, single quotes (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a>'c']" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a>'c']\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

 15) test JSONPath conformance: test/fixtures/whitespace/operators.json tab between logical not and test expression (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?!\t@.a]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?!\\t@.a]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'NOT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

 16) test JSONPath conformance: test/fixtures/name_selector.json double quotes, escaped double quote (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[\"\\\"\"]" to be valid, but got error: %CaseClauseError{term: {:ok, "A"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



 17) test JSONPath conformance: test/fixtures/filter.json less than or equal to string, double quotes (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a<=\"c\"]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a<=\\\"c\\\"]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



 18) test JSONPath conformance: test/fixtures/whitespace/operators.json tab before != (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a\t!=@.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a\\t!=@.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

 19) test JSONPath conformance: test/fixtures/functions/search.json dot matcher on \u2029 (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?search(@, '.')]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?search(@, '.')]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"search\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

 20) test JSONPath conformance: test/fixtures/filter.json less than or equal to null (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a<=null]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a<=null]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



 21) test JSONPath conformance: test/fixtures/name_selector.json single quotes (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$['a']" to be valid, but got error: %CaseClauseError{term: {:ok, "A"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

 22) test JSONPath conformance: test/fixtures/functions/search.json at the end (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?search(@.a, 'a.*')]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?search(@.a, 'a.*')]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"search\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



 23) test JSONPath conformance: test/fixtures/filter.json or (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a=='b'||@.a=='d']" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a=='b'||@.a=='d']\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

...

 24) test JSONPath conformance: test/fixtures/whitespace/functions.json tab between arg and comma (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?search(@\t,'[a-z]+')]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?search(@\\t,'[a-z]+')]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"search\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



 25) test JSONPath conformance: test/fixtures/functions/length.json missing data (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?length(@.a)>=2]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?length(@.a)>=2]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"length\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



 26) test JSONPath conformance: test/fixtures/whitespace/operators.json space between logical not and parenthesized expression (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?! (@.a=='b')]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?! (@.a=='b')]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'NOT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



 27) test JSONPath conformance: test/fixtures/functions/match.json regex from the document (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$.values[?match(@, $.regex)]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$.values[?match(@, $.regex)]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"match\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

 28) test JSONPath conformance: test/fixtures/filter.json and (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a>0&&@.a<10]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a>0&&@.a<10]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



 29) test JSONPath conformance: test/fixtures/basic.json name shorthand (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$.a" to be valid, but got error: %CaseClauseError{term: {:ok, "A"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



 30) test JSONPath conformance: test/fixtures/filter.json non-singular existence, slice (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@[0:2]]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@[0:2]]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

..

 31) test JSONPath conformance: test/fixtures/name_selector.json double quotes, escaped reverse solidus (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[\"\\\\\"]" to be valid, but got error: %CaseClauseError{term: {:ok, "A"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

 32) test JSONPath conformance: test/fixtures/whitespace/operators.json space before != (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a !=@.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a !=@.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

 33) test JSONPath conformance: test/fixtures/whitespace/functions.json space between comma and arg (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?search(@, '[a-z]+')]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?search(@, '[a-z]+')]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"search\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

 34) test JSONPath conformance: test/fixtures/basic.json descendant segment, multiple selectors (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$..['a','d']" to be valid, but got error: %CaseClauseError{term: {:ok, "b"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

 35) test JSONPath conformance: test/fixtures/functions/match.json filter, match function, unicode char class negated, uppercase (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?match(@, '\\\\P{Lu}')]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?match(@, '\\\\\\\\P{Lu}')]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"match\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

...

 36) test JSONPath conformance: test/fixtures/whitespace/selectors.json space between root and bracket (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$ ['a']" to be valid, but got error: %CaseClauseError{term: {:ok, "ab"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



 37) test JSONPath conformance: test/fixtures/filter.json greater than or equal to string, single quotes (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a>='c']" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a>='c']\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

....

 38) test JSONPath conformance: test/fixtures/functions/match.json explicit caret (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?match(@, '^ab.*')]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?match(@, '^ab.*')]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"match\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



 39) test JSONPath conformance: test/fixtures/slice_selector.json slice selector with everything omitted, long form (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[::]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[::]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'RBRACK'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



 40) test JSONPath conformance: test/fixtures/name_selector.json double quotes, supplementary plane character (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[\"𝄞\"]" to be valid, but got error: %ArgumentError{message: "errors were found at the given arguments:\n\n  * 1st argument: not an iolist term\n"}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



 41) test JSONPath conformance: test/fixtures/filter.json non-singular existence, negated (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?!@.*]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?!@.*]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'NOT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

 42) test JSONPath conformance: test/fixtures/whitespace/operators.json return before == (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a\r==@.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a\\r==@.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

 43) test JSONPath conformance: test/fixtures/whitespace/operators.json return after && (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a&& @.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a&& @.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



 44) test JSONPath conformance: test/fixtures/filter.json absolute, equals self (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?$==$]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?$==$]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'DOLLAR'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

 45) test JSONPath conformance: test/fixtures/filter.json equals, special nothing (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$.values[?length(@.a) == value($..c)]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$.values[?length(@.a) == value($..c)]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"length\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

..

 46) test JSONPath conformance: test/fixtures/filter.json equals number, exponent +0 (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a==1e+0]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a==1e+0]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

..

 47) test JSONPath conformance: test/fixtures/whitespace/functions.json return between arg and comma (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?search(@\r,'[a-z]+')]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?search(@\\r,'[a-z]+')]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"search\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

 48) test JSONPath conformance: test/fixtures/functions/length.json string data, unicode (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?length(@)==2]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?length(@)==2]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"length\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



 49) test JSONPath conformance: test/fixtures/whitespace/operators.json newline after || (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a||\n@.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a||\\n@.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

 50) test JSONPath conformance: test/fixtures/functions/search.json escaped backslash before dot (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?search(@, 'a\\\\\\\\.c')]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?search(@, 'a\\\\\\\\\\\\\\\\.c')]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"search\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

..

 51) test JSONPath conformance: test/fixtures/whitespace/functions.json newline between arg and comma (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?search(@\n,'[a-z]+')]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?search(@\\n,'[a-z]+')]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"search\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



 52) test JSONPath conformance: test/fixtures/whitespace/operators.json newline after && (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a&& @.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a&& @.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



 53) test JSONPath conformance: test/fixtures/slice_selector.json in serial, on flat array (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[1:3][::]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[1:3][::]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'RBRACK'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

....

 54) test JSONPath conformance: test/fixtures/functions/length.json string data (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?length(@.a)>=2]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?length(@.a)>=2]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"length\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



 55) test JSONPath conformance: test/fixtures/whitespace/functions.json tabs in an absolute singular selector (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$..[?length(@)==length($\t[0]\t.a)]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$..[?length(@)==length($\\t[0]\\t.a)]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"length\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



 56) test JSONPath conformance: test/fixtures/whitespace/functions.json return between parenthesis and arg (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?count(\r@.*)==1]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?count(\\r@.*)==1]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"count\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



 57) test JSONPath conformance: test/fixtures/functions/length.json number arg (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?length(1)>=2]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?length(1)>=2]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"length\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

 58) test JSONPath conformance: test/fixtures/whitespace/operators.json tab before < (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a\t<@.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a\\t<@.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



 59) test JSONPath conformance: test/fixtures/filter.json less than or equal to false (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a<=false]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a<=false]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

 60) test JSONPath conformance: test/fixtures/filter.json equals number, exponent upper e (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a==1E2]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a==1E2]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.......

 61) test JSONPath conformance: test/fixtures/filter.json not-equals string, double quotes (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a!=\"b\"]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a!=\\\"b\\\"]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

 62) test JSONPath conformance: test/fixtures/filter.json equals number, positive exponent (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a==1e+2]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a==1e+2]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



 63) test JSONPath conformance: test/fixtures/filter.json equals numeric string, double quotes (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a==\"1\"]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a==\\\"1\\\"]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

 64) test JSONPath conformance: test/fixtures/whitespace/functions.json space between arg and parenthesis (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?count(@.* )==1]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?count(@.* )==1]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"count\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

 65) test JSONPath conformance: test/fixtures/filter.json not-equals numeric string, single quotes (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a!='1']" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a!='1']\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



 66) test JSONPath conformance: test/fixtures/functions/match.json explicit dollar (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?match(@, '.*bc$')]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?match(@, '.*bc$')]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"match\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

 67) test JSONPath conformance: test/fixtures/whitespace/operators.json return before < (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a\r<@.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a\\r<@.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

...

 68) test JSONPath conformance: test/fixtures/name_selector.json double quotes, embedded U+007F (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[\"\d\"]" to be valid, but got error: %CaseClauseError{term: {:ok, "A"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

..

 69) test JSONPath conformance: test/fixtures/whitespace/filter.json return between question mark and expression (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?\r@.a]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?\\r@.a]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

..

 70) test JSONPath conformance: test/fixtures/whitespace/operators.json tab after && (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a&& @.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a&& @.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



 71) test JSONPath conformance: test/fixtures/functions/search.json arg is a function expression (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$.values[?search(@, value($..['regex']))]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$.values[?search(@, value($..['regex']))]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"search\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



 72) test JSONPath conformance: test/fixtures/whitespace/selectors.json newline between selector and bracket (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$['a'\n]" to be valid, but got error: %CaseClauseError{term: {:ok, "ab"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



 73) test JSONPath conformance: test/fixtures/whitespace/operators.json return before >= (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.b\r>=@.a]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.b\\r>=@.a]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

..

 74) test JSONPath conformance: test/fixtures/filter.json deep equality, objects (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a==@.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a==@.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

 75) test JSONPath conformance: test/fixtures/basic.json descendant segment, name shorthand (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$..a" to be valid, but got error: %CaseClauseError{term: {:ok, "b"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

...

 76) test JSONPath conformance: test/fixtures/name_selector.json single quotes, escaped tab (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$['\\t']" to be valid, but got error: %CaseClauseError{term: {:ok, "A"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



 77) test JSONPath conformance: test/fixtures/filter.json greater than or equal to false (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a>=false]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a>=false]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

......

 78) test JSONPath conformance: test/fixtures/filter.json deep equality, arrays (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a==@.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a==@.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

 79) test JSONPath conformance: test/fixtures/whitespace/operators.json space between logical not and test expression (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?! @.a]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?! @.a]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'NOT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

 80) test JSONPath conformance: test/fixtures/filter.json multiple selectors, filter and wildcard (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a,*]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a,*]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



 81) test JSONPath conformance: test/fixtures/whitespace/selectors.json tab between selector and comma (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$['a'\t,'b']" to be valid, but got error: %CaseClauseError{term: {:ok, "ab"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

......

 82) test JSONPath conformance: test/fixtures/whitespace/operators.json tab after == (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a==\t@.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a==\\t@.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



 83) test JSONPath conformance: test/fixtures/name_selector.json single quotes, escaped form feed (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$['\\f']" to be valid, but got error: %CaseClauseError{term: {:ok, "A"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

...

 84) test JSONPath conformance: test/fixtures/name_selector.json double quotes, escaped carriage return (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[\"\\r\"]" to be valid, but got error: %CaseClauseError{term: {:ok, "A"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

..

 85) test JSONPath conformance: test/fixtures/functions/match.json arg is a function expression (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$.values[?match(@.a, value($..['regex']))]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$.values[?match(@.a, value($..['regex']))]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"match\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

 86) test JSONPath conformance: test/fixtures/basic.json name shorthand, object data, nested (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$.a.b.c" to be valid, but got error: %CaseClauseError{term: {:ok, %{"b" => %{"c" => "C"}}}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



 87) test JSONPath conformance: test/fixtures/name_selector.json single quotes, surrogate pair 𝄞 (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$['\\uD834\\uDD1E']" to be valid, but got error: %ArgumentError{message: "errors were found at the given arguments:\n\n  * 3rd argument: not a valid replacement\n"}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

..

 88) test JSONPath conformance: test/fixtures/functions/match.json dot in character class (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?match(@, 'a[.b]c')]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?match(@, 'a[.b]c')]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"match\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

 89) test JSONPath conformance: test/fixtures/whitespace/operators.json newline before < (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a\n<@.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a\\n<@.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

..

 90) test JSONPath conformance: test/fixtures/filter.json multiple selectors, filter and slice (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a,1:]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a,1:]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

...

 91) test JSONPath conformance: test/fixtures/functions/match.json select non-match (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?!match(@.a, 'a.*')]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?!match(@.a, 'a.*')]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'NOT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



 92) test JSONPath conformance: test/fixtures/slice_selector.json larger negative step (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[::-2]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Selector \"$[::-2]\" produced [] but expected [3, 1]", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



 93) test JSONPath conformance: test/fixtures/functions/search.json filter, search function, unicode char class negated, uppercase (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?search(@, '\\\\P{Lu}')]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?search(@, '\\\\\\\\P{Lu}')]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"search\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

 94) test JSONPath conformance: test/fixtures/functions/count.json count function (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?count(@..*)>2]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?count(@..*)>2]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"count\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



 95) test JSONPath conformance: test/fixtures/filter.json equals null, absent from data (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a==null]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a==null]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



 96) test JSONPath conformance: test/fixtures/whitespace/selectors.json newline between root and dot (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$\n.a" to be valid, but got error: %CaseClauseError{term: {:ok, "ab"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



 97) test JSONPath conformance: test/fixtures/functions/match.json filter, match function, unicode, surrogate pair (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?match(@, 'a.b')]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?match(@, 'a.b')]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"match\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

 98) test JSONPath conformance: test/fixtures/filter.json group terms, right (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a && (@.b || @.c)]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a && (@.b || @.c)]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

..

 99) test JSONPath conformance: test/fixtures/whitespace/operators.json return after <= (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a<=\r@.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a<=\\r@.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



100) test JSONPath conformance: test/fixtures/whitespace/functions.json tabs in a relative singular selector (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?length(@\t.a\t.b) == 3]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?length(@\\t.a\\t.b) == 3]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"length\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



101) test JSONPath conformance: test/fixtures/filter.json less than null (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a<null]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a<null]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



102) test JSONPath conformance: test/fixtures/filter.json greater than or equal to true (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a>=true]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a>=true]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

..

103) test JSONPath conformance: test/fixtures/whitespace/operators.json tab before <= (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a\t<=@.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a\\t<=@.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



104) test JSONPath conformance: test/fixtures/whitespace/functions.json newline between comma and arg (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?search(@,\n'[a-z]+')]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?search(@,\\n'[a-z]+')]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"search\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

..

105) test JSONPath conformance: test/fixtures/filter.json equals, empty node list and empty node list (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a == @.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a == @.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



106) test JSONPath conformance: test/fixtures/functions/length.json array data (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?length(@.a)>=2]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?length(@.a)>=2]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"length\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

107) test JSONPath conformance: test/fixtures/whitespace/operators.json newline after <= (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a<=\n@.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a<=\\n@.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



108) test JSONPath conformance: test/fixtures/filter.json multiple selectors, filter and index (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a,1]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a,1]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



109) test JSONPath conformance: test/fixtures/whitespace/operators.json space before >= (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.b >=@.a]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.b >=@.a]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

110) test JSONPath conformance: test/fixtures/filter.json non-singular existence, wildcard (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.*]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.*]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



111) test JSONPath conformance: test/fixtures/name_selector.json double quotes, empty (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[\"\"]" to be valid, but got error: %CaseClauseError{term: {:ok, "C"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

112) test JSONPath conformance: test/fixtures/filter.json equals number, decimal fraction, exponent (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a==1.1e2]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a==1.1e2]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

113) test JSONPath conformance: test/fixtures/whitespace/operators.json space before || (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a ||@.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a ||@.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

......

114) test JSONPath conformance: test/fixtures/filter.json existence, without segments (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



115) test JSONPath conformance: test/fixtures/slice_selector.json negative step with default start (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[:0:-1]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[:0:-1]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'COLON'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

...

116) test JSONPath conformance: test/fixtures/filter.json followed by name selector (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a==1].b.x" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a==1].b.x\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

...

117) test JSONPath conformance: test/fixtures/name_selector.json single quotes, escaped carriage return (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$['\\r']" to be valid, but got error: %CaseClauseError{term: {:ok, "A"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



118) test JSONPath conformance: test/fixtures/whitespace/operators.json newline before <= (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a\n<=@.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a\\n<=@.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

119) test JSONPath conformance: test/fixtures/filter.json not exists, data null (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?!@.a]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?!@.a]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'NOT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

120) test JSONPath conformance: test/fixtures/name_selector.json single quotes, escaped ☺, upper case hex (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$['\\u263A']" to be valid, but got error: %CaseClauseError{term: {:ok, "A"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



121) test JSONPath conformance: test/fixtures/functions/match.json don't select match (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?!match(@.a, 'a.*')]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?!match(@.a, 'a.*')]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'NOT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



122) test JSONPath conformance: test/fixtures/slice_selector.json start, max exact (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[9007199254740991::]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[9007199254740991::]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'COLON'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



123) test JSONPath conformance: test/fixtures/whitespace/operators.json space after || (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a|| @.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a|| @.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

124) test JSONPath conformance: test/fixtures/whitespace/selectors.json tab between bracket and selector (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[\t'a']" to be valid, but got error: %CaseClauseError{term: {:ok, "ab"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



125) test JSONPath conformance: test/fixtures/name_selector.json double quotes (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[\"a\"]" to be valid, but got error: %CaseClauseError{term: {:ok, "A"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

126) test JSONPath conformance: test/fixtures/basic.json descendant segment, object traversal, multiple selectors (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$..['a','d']" to be valid, but got error: %CaseClauseError{term: {:ok, "b"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



127) test JSONPath conformance: test/fixtures/filter.json equals number, negative exponent (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a==1e-2]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a==1e-2]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



128) test JSONPath conformance: test/fixtures/whitespace/selectors.json tab between bracket and bracket (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$['a'] \t['b']" to be valid, but got error: %CaseClauseError{term: {:ok, %{"b" => "ab"}}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

...

129) test JSONPath conformance: test/fixtures/name_selector.json double quotes, escaped line feed (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[\"\\n\"]" to be valid, but got error: %CaseClauseError{term: {:ok, "A"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



130) test JSONPath conformance: test/fixtures/filter.json not-equals number (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a!=1]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a!=1]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



131) test JSONPath conformance: test/fixtures/functions/match.json escaped left square bracket (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?match(@, 'a\\\\[.c')]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?match(@, 'a\\\\\\\\[.c')]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"match\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



132) test JSONPath conformance: test/fixtures/whitespace/operators.json tab after || (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a||\t@.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a||\\t@.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



133) test JSONPath conformance: test/fixtures/filter.json left to right evaluation (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a && @.b || @.c]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a && @.b || @.c]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

134) test JSONPath conformance: test/fixtures/whitespace/operators.json newline after != (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a!=\n@.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a!=\\n@.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.......

135) test JSONPath conformance: test/fixtures/filter.json equals number, exponent 0 (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a==1e0]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a==1e0]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



136) test JSONPath conformance: test/fixtures/whitespace/selectors.json space between bracket and selector (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[ 'a']" to be valid, but got error: %CaseClauseError{term: {:ok, "ab"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

137) test JSONPath conformance: test/fixtures/filter.json equals number, negative zero and zero (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a==-0]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a==-0]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

..

138) test JSONPath conformance: test/fixtures/whitespace/operators.json space before == (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a ==@.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a ==@.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

139) test JSONPath conformance: test/fixtures/name_selector.json double quotes, escaped ☺, upper case hex (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[\"\\u263A\"]" to be valid, but got error: %CaseClauseError{term: {:ok, "A"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

140) test JSONPath conformance: test/fixtures/filter.json multiple selectors, comparison filter, index and slice (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[1, ?@.a=='b', 1:]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[1, ?@.a=='b', 1:]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



141) test JSONPath conformance: test/fixtures/whitespace/operators.json space after >= (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.b>= @.a]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.b>= @.a]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

142) test JSONPath conformance: test/fixtures/functions/match.json dot matcher on \u2028 (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?match(@, '.')]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?match(@, '.')]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"match\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

143) test JSONPath conformance: test/fixtures/filter.json multiple selectors, comparison (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a=='b',?@.b=='x']" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a=='b',?@.b=='x']\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

144) test JSONPath conformance: test/fixtures/whitespace/operators.json newline before >= (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.b\n>=@.a]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.b\\n>=@.a]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

145) test JSONPath conformance: test/fixtures/name_selector.json double quotes, escaped backspace (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[\"\\b\"]" to be valid, but got error: %CaseClauseError{term: {:ok, "A"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



146) test JSONPath conformance: test/fixtures/whitespace/selectors.json return between root and bracket (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$\r['a']" to be valid, but got error: %CaseClauseError{term: {:ok, "ab"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

147) test JSONPath conformance: test/fixtures/whitespace/selectors.json tab between selector and bracket (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$['a'\t]" to be valid, but got error: %CaseClauseError{term: {:ok, "ab"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



148) test JSONPath conformance: test/fixtures/functions/length.json arg is special nothing (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?length(value(@.a))>0]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?length(value(@.a))>0]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"length\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



149) test JSONPath conformance: test/fixtures/whitespace/selectors.json return between bracket and selector (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[\r'a']" to be valid, but got error: %CaseClauseError{term: {:ok, "ab"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

..

150) test JSONPath conformance: test/fixtures/filter.json exists or exists, data false (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a||@.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a||@.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



151) test JSONPath conformance: test/fixtures/whitespace/operators.json newline after == (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a==\n@.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a==\\n@.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



152) test JSONPath conformance: test/fixtures/filter.json less than true (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a<true]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a<true]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

...

153) test JSONPath conformance: test/fixtures/whitespace/selectors.json space between bracket and bracket (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$['a'] ['b']" to be valid, but got error: %CaseClauseError{term: {:ok, %{"b" => "ab"}}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

154) test JSONPath conformance: test/fixtures/whitespace/operators.json return after || (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a||\r@.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a||\\r@.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



155) test JSONPath conformance: test/fixtures/functions/search.json double quotes (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?search(@.a, \"a.*\")]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?search(@.a, \\\"a.*\\\")]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"search\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



156) test JSONPath conformance: test/fixtures/whitespace/operators.json tab after > (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.b>\t@.a]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.b>\\t@.a]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

157) test JSONPath conformance: test/fixtures/filter.json string literal, escaped single quote in single quotes (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@ == 'quoted\\' literal']" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@ == 'quoted\\\\' literal']\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

158) test JSONPath conformance: test/fixtures/filter.json string literal, single quote in double quotes (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@ == \"quoted' literal\"]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@ == \\\"quoted' literal\\\"]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

159) test JSONPath conformance: test/fixtures/filter.json name segment on array, selects nothing (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@['0'] == 5]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@['0'] == 5]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



160) test JSONPath conformance: test/fixtures/whitespace/functions.json return between comma and arg (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?search(@,\r'[a-z]+')]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?search(@,\\r'[a-z]+')]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"search\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



161) test JSONPath conformance: test/fixtures/functions/value.json multi-value nodelist (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?value(@.*)==4]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?value(@.*)==4]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"value\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

...

162) test JSONPath conformance: test/fixtures/filter.json not-equals string, single quotes, different type (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a!='b']" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a!='b']\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



163) test JSONPath conformance: test/fixtures/filter.json nested (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@[?@>1]]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@[?@>1]]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

..

164) test JSONPath conformance: test/fixtures/name_selector.json double quotes, embedded U+0020 (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[\" \"]" to be valid, but got error: %CaseClauseError{term: {:ok, "A"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

..

165) test JSONPath conformance: test/fixtures/functions/search.json don't select match (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?!search(@.a, 'a.*')]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?!search(@.a, 'a.*')]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'NOT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



166) test JSONPath conformance: test/fixtures/filter.json equals number, decimal fraction, negative exponent (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a==1.1e-2]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a==1.1e-2]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

....

167) test JSONPath conformance: test/fixtures/functions/match.json escaped backslash before dot (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?match(@, 'a\\\\\\\\.c')]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?match(@, 'a\\\\\\\\\\\\\\\\.c')]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"match\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

..

168) test JSONPath conformance: test/fixtures/name_selector.json name, double quotes, nested (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[\"a\"][\"b\"][\"c\"]" to be valid, but got error: %CaseClauseError{term: {:ok, %{"b" => %{"c" => "C"}}}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

...

169) test JSONPath conformance: test/fixtures/whitespace/filter.json space between bracket and question mark (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[ ?@.a]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[ ?@.a]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

170) test JSONPath conformance: test/fixtures/whitespace/selectors.json newline between comma and selector (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$['a',\n'b']" to be valid, but got error: %CaseClauseError{term: {:ok, "ab"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

..

171) test JSONPath conformance: test/fixtures/filter.json not-equals string, double quotes, different types (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a!=\"b\"]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a!=\\\"b\\\"]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



172) test JSONPath conformance: test/fixtures/filter.json not-equals null, absent from data (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a!=null]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a!=null]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

173) test JSONPath conformance: test/fixtures/whitespace/operators.json return before && (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a\r&&@.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a\\r&&@.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

174) test JSONPath conformance: test/fixtures/whitespace/operators.json space before <= (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a <=@.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a <=@.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

175) test JSONPath conformance: test/fixtures/functions/match.json dot matcher on \u2029 (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?match(@, '.')]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?match(@, '.')]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"match\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

..

176) test JSONPath conformance: test/fixtures/whitespace/operators.json space after && (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a&& @.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a&& @.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



177) test JSONPath conformance: test/fixtures/filter.json less than or equal to number (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a<=10]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a<=10]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

178) test JSONPath conformance: test/fixtures/filter.json equals true (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a==true]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a==true]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



179) test JSONPath conformance: test/fixtures/whitespace/functions.json tab between arg and parenthesis (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?count(@.*\t)==1]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?count(@.*\\t)==1]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"count\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

..

180) test JSONPath conformance: test/fixtures/filter.json equals number, exponent -0 (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a==1e-0]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a==1e-0]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



181) test JSONPath conformance: test/fixtures/whitespace/functions.json newline between arg and parenthesis (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?count(@.*\n)==1]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?count(@.*\\n)==1]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"count\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

182) test JSONPath conformance: test/fixtures/whitespace/operators.json tab between logical not and parenthesized expression (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?!\t(@.a=='b')]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?!\\t(@.a=='b')]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'NOT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



183) test JSONPath conformance: test/fixtures/filter.json and binds more tightly than or (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a || @.b && @.c]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a || @.b && @.c]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

184) test JSONPath conformance: test/fixtures/whitespace/selectors.json return between comma and selector (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$['a',\r'b']" to be valid, but got error: %CaseClauseError{term: {:ok, "ab"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



185) test JSONPath conformance: test/fixtures/whitespace/operators.json space before && (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a &&@.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a &&@.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

186) test JSONPath conformance: test/fixtures/functions/match.json filter, match function, unicode char class, uppercase (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?match(@, '\\\\p{Lu}')]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?match(@, '\\\\\\\\p{Lu}')]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"match\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



187) test JSONPath conformance: test/fixtures/functions/search.json escaped dot (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?search(@, 'a\\\\.c')]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?search(@, 'a\\\\\\\\.c')]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"search\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

..

188) test JSONPath conformance: test/fixtures/whitespace/operators.json return between logical not and test expression (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?!\r@.a]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?!\\r@.a]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'NOT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

189) test JSONPath conformance: test/fixtures/filter.json less than or equal to true (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a<=true]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a<=true]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.....

190) test JSONPath conformance: test/fixtures/basic.json name shorthand, underscore (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$._" to be valid, but got error: %CaseClauseError{term: {:ok, "A"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



191) test JSONPath conformance: test/fixtures/filter.json existence (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

..........

192) test JSONPath conformance: test/fixtures/whitespace/operators.json space after < (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a< @.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a< @.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



193) test JSONPath conformance: test/fixtures/name_selector.json name, double quotes, contains single quote (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[\"a'\"]" to be valid, but got error: %CaseClauseError{term: {:ok, "A"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



194) test JSONPath conformance: test/fixtures/functions/length.json null arg (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?length(null)>=2]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?length(null)>=2]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"length\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

..

195) test JSONPath conformance: test/fixtures/functions/search.json filter, search function, unicode char class, uppercase (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?search(@, '\\\\p{Lu}')]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?search(@, '\\\\\\\\p{Lu}')]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"search\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

196) test JSONPath conformance: test/fixtures/whitespace/operators.json newline before != (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a\n!=@.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a\\n!=@.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



197) test JSONPath conformance: test/fixtures/whitespace/filter.json newline between question mark and expression (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?\n@.a]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?\\n@.a]\" to be invalid, but parser failed, reason: {2, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



198) test JSONPath conformance: test/fixtures/filter.json exists and not-equals null, absent from data (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a&&@.a!=null]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a&&@.a!=null]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



199) test JSONPath conformance: test/fixtures/whitespace/functions.json newline between parenthesis and arg (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?count(\n@.*)==1]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?count(\\n@.*)==1]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"count\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



200) test JSONPath conformance: test/fixtures/whitespace/operators.json return after >= (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.b>=\r@.a]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.b>=\\r@.a]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



201) test JSONPath conformance: test/fixtures/filter.json exists and exists, data false (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a&&@.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a&&@.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



202) test JSONPath conformance: test/fixtures/name_selector.json double quotes, surrogate pair 𝄞 (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[\"\\uD834\\uDD1E\"]" to be valid, but got error: %ArgumentError{message: "errors were found at the given arguments:\n\n  * 3rd argument: not a valid replacement\n"}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



203) test JSONPath conformance: test/fixtures/whitespace/functions.json returns in an absolute singular selector (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$..[?length(@)==length($\r[0]\r.a)]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$..[?length(@)==length($\\r[0]\\r.a)]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"length\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



204) test JSONPath conformance: test/fixtures/name_selector.json double quotes, after low surrogates (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[\"\\uE000\\uE000\"]" to be valid, but got error: %CaseClauseError{term: {:ok, "A"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



205) test JSONPath conformance: test/fixtures/whitespace/operators.json space after == (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a== @.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a== @.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



206) test JSONPath conformance: test/fixtures/functions/search.json non-string second arg (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?search(@.a, 1)]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?search(@.a, 1)]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"search\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

....

207) test JSONPath conformance: test/fixtures/whitespace/selectors.json tab between root and dot (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$\t.a" to be valid, but got error: %CaseClauseError{term: {:ok, "ab"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



208) test JSONPath conformance: test/fixtures/filter.json not-equals false (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a!=false]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a!=false]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

..

209) test JSONPath conformance: test/fixtures/whitespace/functions.json newlines in a relative singular selector (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?length(@\n.a\n.b) == 3]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?length(@\\n.a\\n.b) == 3]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"length\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



210) test JSONPath conformance: test/fixtures/filter.json not expression (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?!(@.a=='b')]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?!(@.a=='b')]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'NOT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



211) test JSONPath conformance: test/fixtures/whitespace/operators.json return after != (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a!=\r@.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a!=\\r@.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

..

212) test JSONPath conformance: test/fixtures/functions/search.json regex from the document (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$.values[?search(@, $.regex)]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$.values[?search(@, $.regex)]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"search\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

213) test JSONPath conformance: test/fixtures/filter.json equals number, exponent +00 (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a==1e+00]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a==1e+00]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



214) test JSONPath conformance: test/fixtures/whitespace/selectors.json space between selector and comma (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$['a' ,'b']" to be valid, but got error: %CaseClauseError{term: {:ok, "ab"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

..

215) test JSONPath conformance: test/fixtures/functions/match.json non-string first arg (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?match(1, 'a.*')]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?match(1, 'a.*')]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"match\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



216) test JSONPath conformance: test/fixtures/whitespace/selectors.json tab between root and bracket (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$\t['a']" to be valid, but got error: %CaseClauseError{term: {:ok, "ab"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



217) test JSONPath conformance: test/fixtures/filter.json name segment on primitive, selects nothing (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a == 1]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a == 1]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

218) test JSONPath conformance: test/fixtures/name_selector.json single quotes, escaped single quote (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$['\\'']" to be valid, but got error: %CaseClauseError{term: {:ok, "A"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

219) test JSONPath conformance: test/fixtures/functions/match.json escaped right square bracket (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?match(@, 'a[\\\\].]c')]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?match(@, 'a[\\\\\\\\].]c')]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"match\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



220) test JSONPath conformance: test/fixtures/whitespace/operators.json newline after >= (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.b>=\n@.a]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.b>=\\n@.a]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

....

221) test JSONPath conformance: test/fixtures/filter.json greater than true (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a>true]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a>true]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



222) test JSONPath conformance: test/fixtures/whitespace/selectors.json return between selector and bracket (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$['a'\r]" to be valid, but got error: %CaseClauseError{term: {:ok, "ab"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

223) test JSONPath conformance: test/fixtures/name_selector.json single quotes, escaped ☺, lower case hex (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$['\\u263a']" to be valid, but got error: %CaseClauseError{term: {:ok, "A"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



224) test JSONPath conformance: test/fixtures/filter.json equals number, decimal fraction, positive exponent (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a==1.1e+2]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a==1.1e+2]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

..

225) test JSONPath conformance: test/fixtures/slice_selector.json negative step with default start and end (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[::-1]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Selector \"$[::-1]\" produced [] but expected [3, 2, 1, 0]", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



226) test JSONPath conformance: test/fixtures/basic.json wildcard shorthand, then name shorthand (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$.*.a" to be valid, but got error: %CaseClauseError{term: {:ok, "Ax"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



227) test JSONPath conformance: test/fixtures/whitespace/operators.json newline before && (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a\n&&@.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a\\n&&@.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



228) test JSONPath conformance: test/fixtures/whitespace/operators.json return before > (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.b\r>@.a]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.b\\r>@.a]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



229) test JSONPath conformance: test/fixtures/whitespace/selectors.json space between root and dot (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$ .a" to be valid, but got error: %CaseClauseError{term: {:ok, "ab"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

230) test JSONPath conformance: test/fixtures/whitespace/functions.json tab between parenthesis and arg (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?count(\t@.*)==1]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?count(\\t@.*)==1]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"count\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



231) test JSONPath conformance: test/fixtures/filter.json index segment on object, selects nothing (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@[0] == 5]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@[0] == 5]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



232) test JSONPath conformance: test/fixtures/filter.json equals false (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a==false]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a==false]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.....

233) test JSONPath conformance: test/fixtures/whitespace/operators.json tab after != (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a!=\t@.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a!=\\t@.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



234) test JSONPath conformance: test/fixtures/whitespace/operators.json newline before || (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a\n||@.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a\\n||@.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



235) test JSONPath conformance: test/fixtures/name_selector.json single quotes, escaped line feed (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$['\\n']" to be valid, but got error: %CaseClauseError{term: {:ok, "A"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



236) test JSONPath conformance: test/fixtures/filter.json equals number, zero and negative zero (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a==0]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a==0]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



237) test JSONPath conformance: test/fixtures/filter.json less than string, double quotes (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a<\"c\"]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a<\\\"c\\\"]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

238) test JSONPath conformance: test/fixtures/functions/match.json found match (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?match(@.a, 'a.*')]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?match(@.a, 'a.*')]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"match\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

239) test JSONPath conformance: test/fixtures/whitespace/selectors.json space between comma and selector (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$['a', 'b']" to be valid, but got error: %CaseClauseError{term: {:ok, "ab"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

240) test JSONPath conformance: test/fixtures/whitespace/operators.json newline before == (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a\n==@.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a\\n==@.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



241) test JSONPath conformance: test/fixtures/whitespace/operators.json tab before && (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a\t&&@.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a\\t&&@.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

242) test JSONPath conformance: test/fixtures/filter.json equals number, exponent (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a==1e2]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a==1e2]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

..

243) test JSONPath conformance: test/fixtures/whitespace/operators.json return after == (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a==\r@.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a==\\r@.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



244) test JSONPath conformance: test/fixtures/name_selector.json double quotes, surrogate pair 😀 (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[\"\\uD83D\\uDE00\"]" to be valid, but got error: %ArgumentError{message: "errors were found at the given arguments:\n\n  * 3rd argument: not a valid replacement\n"}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

245) test JSONPath conformance: test/fixtures/functions/length.json false arg (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?length(false)>=2]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?length(false)>=2]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"length\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

246) test JSONPath conformance: test/fixtures/functions/search.json escaped left square bracket (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?search(@, 'a\\\\[.c')]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?search(@, 'a\\\\\\\\[.c')]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"search\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



247) test JSONPath conformance: test/fixtures/whitespace/selectors.json tab between comma and selector (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$['a',\t'b']" to be valid, but got error: %CaseClauseError{term: {:ok, "ab"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



248) test JSONPath conformance: test/fixtures/filter.json not-equals number, different types (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a!=1]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a!=1]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



249) test JSONPath conformance: test/fixtures/whitespace/operators.json tab before >= (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.b\t>=@.a]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.b\\t>=@.a]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



250) test JSONPath conformance: test/fixtures/whitespace/filter.json newline between bracket and question mark (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[\n?@.a]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[\\n?@.a]\" to be invalid, but parser failed, reason: {2, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

251) test JSONPath conformance: test/fixtures/functions/match.json escaped dot (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?match(@, 'a\\\\.c')]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?match(@, 'a\\\\\\\\.c')]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"match\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



252) test JSONPath conformance: test/fixtures/filter.json object data (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@<3]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@<3]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

....

253) test JSONPath conformance: test/fixtures/whitespace/filter.json space between question mark and expression (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[? @.a]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[? @.a]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



254) test JSONPath conformance: test/fixtures/whitespace/operators.json tab after < (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a<\t@.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a<\\t@.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



255) test JSONPath conformance: test/fixtures/whitespace/operators.json newline between logical not and parenthesized expression (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?!\n(@.a=='b')]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?!\\n(@.a=='b')]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'NOT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



256) test JSONPath conformance: test/fixtures/whitespace/functions.json newlines in an absolute singular selector (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$..[?length(@)==length($\n[0]\n.a)]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$..[?length(@)==length($\\n[0]\\n.a)]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"length\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



257) test JSONPath conformance: test/fixtures/functions/search.json non-string first arg (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?search(1, 'a.*')]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?search(1, 'a.*')]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"search\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

..

258) test JSONPath conformance: test/fixtures/whitespace/operators.json tab after <= (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a<=\t@.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a<=\\t@.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



259) test JSONPath conformance: test/fixtures/whitespace/operators.json space after != (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a!= @.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a!= @.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

260) test JSONPath conformance: test/fixtures/whitespace/selectors.json newline between bracket and selector (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[\n'a']" to be valid, but got error: %CaseClauseError{term: {:ok, "ab"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



261) test JSONPath conformance: test/fixtures/name_selector.json double quotes, escaped tab (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[\"\\t\"]" to be valid, but got error: %CaseClauseError{term: {:ok, "A"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

262) test JSONPath conformance: test/fixtures/filter.json greater than false (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a>false]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a>false]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



263) test JSONPath conformance: test/fixtures/whitespace/functions.json return between arg and parenthesis (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?count(@.*\r)==1]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?count(@.*\\r)==1]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"count\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



264) test JSONPath conformance: test/fixtures/basic.json name shorthand, extended unicode ☺ (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$.☺" to be valid, but got error: %CaseClauseError{term: {:ok, "A"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



265) test JSONPath conformance: test/fixtures/functions/search.json select non-match (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?!search(@.a, 'a.*')]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?!search(@.a, 'a.*')]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'NOT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



266) test JSONPath conformance: test/fixtures/filter.json equals self (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@==@]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@==@]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

267) test JSONPath conformance: test/fixtures/filter.json greater than or equal to string, double quotes (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a>=\"c\"]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a>=\\\"c\\\"]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



268) test JSONPath conformance: test/fixtures/filter.json non-singular existence, multiple (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@[0, 0, 'a']]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@[0, 0, 'a']]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

...

269) test JSONPath conformance: test/fixtures/slice_selector.json end, min exact (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[:-9007199254740991:]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[:-9007199254740991:]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'COLON'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

270) test JSONPath conformance: test/fixtures/name_selector.json single quotes, escaped solidus (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$['\\/']" to be valid, but got error: %CaseClauseError{term: {:ok, "A"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

......

271) test JSONPath conformance: test/fixtures/slice_selector.json start, min exact (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[-9007199254740991::]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[-9007199254740991::]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'COLON'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

..

272) test JSONPath conformance: test/fixtures/whitespace/operators.json tab before || (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a\t||@.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a\\t||@.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

..

273) test JSONPath conformance: test/fixtures/filter.json equals string, double quotes (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a==\"b\"]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a==\\\"b\\\"]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



274) test JSONPath conformance: test/fixtures/whitespace/operators.json return before != (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a\r!=@.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a\\r!=@.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



275) test JSONPath conformance: test/fixtures/whitespace/functions.json space between parenthesis and arg (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?count( @.*)==1]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?count( @.*)==1]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"count\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

276) test JSONPath conformance: test/fixtures/functions/search.json escaped right square bracket (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?search(@, 'a[\\\\].]c')]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?search(@, 'a[\\\\\\\\].]c')]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"search\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



277) test JSONPath conformance: test/fixtures/filter.json absolute existence, with segments (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?$.*.a]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?$.*.a]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'DOLLAR'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

...

278) test JSONPath conformance: test/fixtures/functions/match.json double quotes (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?match(@.a, \"a.*\")]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?match(@.a, \\\"a.*\\\")]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"match\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

279) test JSONPath conformance: test/fixtures/filter.json not-equals numeric string, double quotes (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a!=\"1\"]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a!=\\\"1\\\"]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

..

280) test JSONPath conformance: test/fixtures/whitespace/filter.json tab between question mark and expression (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?\t@.a]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?\\t@.a]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



281) test JSONPath conformance: test/fixtures/filter.json multiple selectors, overlapping (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a,?@.d]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a,?@.d]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



282) test JSONPath conformance: test/fixtures/whitespace/operators.json space before > (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.b >@.a]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.b >@.a]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.....

283) test JSONPath conformance: test/fixtures/slice_selector.json end, max exact (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[:9007199254740991:]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[:9007199254740991:]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'COLON'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

284) test JSONPath conformance: test/fixtures/filter.json not-equals true (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a!=true]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a!=true]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



285) test JSONPath conformance: test/fixtures/whitespace/operators.json tab before == (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a\t==@.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a\\t==@.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



286) test JSONPath conformance: test/fixtures/whitespace/operators.json space after <= (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a<= @.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a<= @.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



287) test JSONPath conformance: test/fixtures/filter.json less than string, single quotes (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a<'c']" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a<'c']\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.....

288) test JSONPath conformance: test/fixtures/filter.json equals, empty node list and special nothing (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a == length(@.b)]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a == length(@.b)]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



289) test JSONPath conformance: test/fixtures/whitespace/functions.json spaces in an absolute singular selector (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$..[?length(@)==length($ [0] .a)]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$..[?length(@)==length($ [0] .a)]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"length\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



290) test JSONPath conformance: test/fixtures/whitespace/functions.json returns in a relative singular selector (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?length(@\r.a\r.b) == 3]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?length(@\\r.a\\r.b) == 3]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"length\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



291) test JSONPath conformance: test/fixtures/name_selector.json single quotes, escaped reverse solidus (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$['\\\\']" to be valid, but got error: %CaseClauseError{term: {:ok, "A"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

292) test JSONPath conformance: test/fixtures/functions/search.json at the start (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?search(@.a, 'a.*')]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?search(@.a, 'a.*')]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"search\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



293) test JSONPath conformance: test/fixtures/filter.json greater than or equal to number (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a>=10]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a>=10]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

294) test JSONPath conformance: test/fixtures/name_selector.json single quotes, embedded U+0020 (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[' ']" to be valid, but got error: %CaseClauseError{term: {:ok, "A"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

295) test JSONPath conformance: test/fixtures/whitespace/operators.json tab after >= (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.b>=\t@.a]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.b>=\\t@.a]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



296) test JSONPath conformance: test/fixtures/filter.json greater than null (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a>null]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a>null]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



297) test JSONPath conformance: test/fixtures/filter.json followed by child segment that selects multiple elements (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.z=='_']['x','y']" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.z=='_']['x','y']\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

298) test JSONPath conformance: test/fixtures/filter.json equals string, single quotes (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a=='b']" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a=='b']\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

...

299) test JSONPath conformance: test/fixtures/filter.json equals, absent from index selector equals absent from name selector (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.absent==@.list[9]]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.absent==@.list[9]]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

..

300) test JSONPath conformance: test/fixtures/name_selector.json single quotes, surrogate pair 😀 (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$['\\uD83D\\uDE00']" to be valid, but got error: %ArgumentError{message: "errors were found at the given arguments:\n\n  * 3rd argument: not a valid replacement\n"}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

301) test JSONPath conformance: test/fixtures/whitespace/functions.json spaces in a relative singular selector (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?length(@ .a .b) == 3]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?length(@ .a .b) == 3]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"length\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

302) test JSONPath conformance: test/fixtures/filter.json less than false (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a<false]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a<false]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

303) test JSONPath conformance: test/fixtures/name_selector.json double quotes, before high surrogates (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[\"\\uD7FF\\uD7FF\"]" to be valid, but got error: %CaseClauseError{term: {:ok, "A"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



304) test JSONPath conformance: test/fixtures/whitespace/operators.json tab before > (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.b\t>@.a]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.b\\t>@.a]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



305) test JSONPath conformance: test/fixtures/whitespace/operators.json return before <= (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a\r<=@.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a\\r<=@.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

..

306) test JSONPath conformance: test/fixtures/filter.json absolute existence, without segments (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?$]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?$]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'DOLLAR'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



307) test JSONPath conformance: test/fixtures/whitespace/selectors.json return between selector and comma (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$['a'\r,'b']" to be valid, but got error: %CaseClauseError{term: {:ok, "ab"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



308) test JSONPath conformance: test/fixtures/name_selector.json double quotes, escaped ☺, lower case hex (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[\"\\u263a\"]" to be valid, but got error: %CaseClauseError{term: {:ok, "A"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



309) test JSONPath conformance: test/fixtures/filter.json equals number, decimal fraction, trailing 0 (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a==1.10]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a==1.10]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

310) test JSONPath conformance: test/fixtures/filter.json existence, present with null (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



311) test JSONPath conformance: test/fixtures/filter.json equals number, with and without decimal fraction (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a==1.0]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a==1.0]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



312) test JSONPath conformance: test/fixtures/basic.json multiple selectors, name and index, object data (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$['a',1]" to be valid, but got error: %CaseClauseError{term: {:ok, 1}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



313) test JSONPath conformance: test/fixtures/slice_selector.json excessively large from value with negative step (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[113667776004:0:-1]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Selector \"$[113667776004:0:-1]\" produced [nil, 9, 8, 7, 6, 5, 4, 3, 2, 1] but expected [9, 8, 7, 6, 5, 4, 3, 2, 1]", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



314) test JSONPath conformance: test/fixtures/functions/length.json arg is a function expression (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$.values[?length(@.a)==length(value($..c))]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$.values[?length(@.a)==length(value($..c))]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"length\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

..

315) test JSONPath conformance: test/fixtures/whitespace/functions.json tab between comma and arg (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?search(@,\t'[a-z]+')]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?search(@,\\t'[a-z]+')]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"search\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



316) test JSONPath conformance: test/fixtures/whitespace/operators.json newline between logical not and test expression (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?!\n@.a]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?!\\n@.a]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'NOT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

317) test JSONPath conformance: test/fixtures/filter.json not exists (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?!@.a]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?!@.a]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'NOT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

318) test JSONPath conformance: test/fixtures/filter.json greater than or equal to null (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a>=null]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a>=null]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

319) test JSONPath conformance: test/fixtures/functions/count.json multiple-selector arg (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?count(@['a','d'])>1]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?count(@['a','d'])>1]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"count\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

320) test JSONPath conformance: test/fixtures/slice_selector.json excessively small to value with negative step (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[3:-113667776004:-1]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Selector \"$[3:-113667776004:-1]\" produced [3, 2, 1] but expected [3, 2, 1, 0]", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

..

321) test JSONPath conformance: test/fixtures/whitespace/operators.json newline before > (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.b\n>@.a]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.b\\n>@.a]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

...

322) test JSONPath conformance: test/fixtures/filter.json greater than string, double quotes (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a>\"c\"]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a>\\\"c\\\"]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



323) test JSONPath conformance: test/fixtures/functions/search.json dot matcher on \u2028 (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?search(@, '.')]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?search(@, '.')]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"search\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



324) test JSONPath conformance: test/fixtures/basic.json multiple selectors, wildcard and name (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[*,'a']" to be valid, but got error: %CaseClauseError{term: {:ok, "A"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

..

325) test JSONPath conformance: test/fixtures/filter.json string literal, escaped double quote in double quotes (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@ == \"quoted\\\" literal\"]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@ == \\\"quoted\\\\\\\" literal\\\"]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

...

326) test JSONPath conformance: test/fixtures/name_selector.json single quotes, escaped backspace (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$['\\b']" to be valid, but got error: %CaseClauseError{term: {:ok, "A"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

327) test JSONPath conformance: test/fixtures/whitespace/functions.json space between arg and comma (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?search(@ ,'[a-z]+')]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?search(@ ,'[a-z]+')]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"search\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



328) test JSONPath conformance: test/fixtures/whitespace/operators.json return between logical not and parenthesized expression (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?!\r(@.a=='b')]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?!\\r(@.a=='b')]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'NOT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

...

329) test JSONPath conformance: test/fixtures/whitespace/operators.json space before < (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a <@.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a <@.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

330) test JSONPath conformance: test/fixtures/filter.json equals null (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a==null]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a==null]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

..

331) test JSONPath conformance: test/fixtures/whitespace/operators.json newline after > (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.b>\n@.a]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.b>\\n@.a]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



332) test JSONPath conformance: test/fixtures/functions/count.json single-node arg (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?count(@.a)>1]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?count(@.a)>1]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"count\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



333) test JSONPath conformance: test/fixtures/whitespace/filter.json tab between bracket and question mark (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[\t?@.a]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[\\t?@.a]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



334) test JSONPath conformance: test/fixtures/filter.json less than or equal to string, single quotes (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a<='c']" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a<='c']\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

335) test JSONPath conformance: test/fixtures/filter.json less than number (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a<10]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a<10]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

....

336) test JSONPath conformance: test/fixtures/whitespace/operators.json return after > (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.b>\r@.a]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.b>\\r@.a]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

...

337) test JSONPath conformance: test/fixtures/whitespace/filter.json return between bracket and question mark (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[\r?@.a]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[\\r?@.a]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



338) test JSONPath conformance: test/fixtures/functions/search.json dot in character class (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?search(@, 'a[.b]c')]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?search(@, 'a[.b]c')]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"search\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



339) test JSONPath conformance: test/fixtures/filter.json greater than number (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a>10]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a>10]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



340) test JSONPath conformance: test/fixtures/filter.json group terms, left (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?(@.a || @.b) && @.c]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?(@.a || @.b) && @.c]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AND'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



341) test JSONPath conformance: test/fixtures/whitespace/selectors.json newline between root and bracket (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$\n['a']" to be valid, but got error: %CaseClauseError{term: {:ok, "ab"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



342) test JSONPath conformance: test/fixtures/filter.json equals number, decimal fraction (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a==1.1]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a==1.1]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



343) test JSONPath conformance: test/fixtures/whitespace/operators.json return before || (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a\r||@.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a\\r||@.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

....

344) test JSONPath conformance: test/fixtures/filter.json not-equals null (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a!=null]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a!=null]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



345) test JSONPath conformance: test/fixtures/filter.json equals numeric string, single quotes (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a=='1']" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a=='1']\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



346) test JSONPath conformance: test/fixtures/whitespace/selectors.json space between selector and bracket (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$['a' ]" to be valid, but got error: %CaseClauseError{term: {:ok, "ab"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



347) test JSONPath conformance: test/fixtures/slice_selector.json negative step with default end (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[2::-1]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[2::-1]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'COLON'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

...

348) test JSONPath conformance: test/fixtures/filter.json string literal, double quote in single quotes (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@ == 'quoted\" literal']" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@ == 'quoted\\\" literal']\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



349) test JSONPath conformance: test/fixtures/name_selector.json double quotes, escaped form feed (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[\"\\f\"]" to be valid, but got error: %CaseClauseError{term: {:ok, "A"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



350) test JSONPath conformance: test/fixtures/whitespace/selectors.json return between bracket and bracket (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$['a'] \r['b']" to be valid, but got error: %CaseClauseError{term: {:ok, %{"b" => "ab"}}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



351) test JSONPath conformance: test/fixtures/whitespace/operators.json return after < (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a<\r@.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a<\\r@.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



352) test JSONPath conformance: test/fixtures/functions/search.json filter, search function, unicode, surrogate pair (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?search(@, 'a.b')]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?search(@, 'a.b')]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"search\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



353) test JSONPath conformance: test/fixtures/functions/length.json true arg (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?length(true)>=2]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?length(true)>=2]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", [[60, 60, ~c\"\\\"length\\\"\", 62, 62]]]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

354) test JSONPath conformance: test/fixtures/whitespace/operators.json space after > (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.b> @.a]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.b> @.a]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



355) test JSONPath conformance: test/fixtures/name_selector.json double quotes, escaped solidus (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[\"\\/\"]" to be valid, but got error: %CaseClauseError{term: {:ok, "A"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)



356) test JSONPath conformance: test/fixtures/name_selector.json single quotes, empty (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$['']" to be valid, but got error: %CaseClauseError{term: {:ok, "C"}}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)

.

357) test JSONPath conformance: test/fixtures/filter.json multiple selectors (JsonPathConformanceTest)
     test/conformance_test.exs:24
     Expected selector "$[?@.a,?@.b]" to be valid, but got error: %ExUnit.AssertionError{left: :ex_unit_no_meaningful_value, right: :ex_unit_no_meaningful_value, message: "Expected selector \"$[?@.a,?@.b]\" to be invalid, but parser failed, reason: {1, :jsonpath_parser, [~c\"syntax error before: \", ~c\"'AT'\"]}", expr: :ex_unit_no_meaningful_value, args: :ex_unit_no_meaningful_value, doctest: :ex_unit_no_meaningful_value, context: :==}
     code: assert invalid?,
     stacktrace:
       test/conformance_test.exs:86: (test)


Finished in 22.9 seconds (22.9s async, 0.00s sync)
702 tests, 357 failures

Randomized with seed 709071

⏵ Task `mix test test/conformance_test.exs:7` finished with non-zero error code: 2
⏵ Command: /bin/zsh -i -c '$"mix test test/conformance_test.exs:7"'
